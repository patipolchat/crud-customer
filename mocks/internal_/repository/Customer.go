// Code generated by mockery v2.44.2. DO NOT EDIT.

package repository

import (
	context "context"
	entity "crud-customer/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// Customer is an autogenerated mock type for the Customer type
type Customer struct {
	mock.Mock
}

type Customer_Expecter struct {
	mock *mock.Mock
}

func (_m *Customer) EXPECT() *Customer_Expecter {
	return &Customer_Expecter{mock: &_m.Mock}
}

// CreateCustomer provides a mock function with given fields: ctx, customer
func (_m *Customer) CreateCustomer(ctx context.Context, customer *entity.Customer) (*uint, error) {
	ret := _m.Called(ctx, customer)

	if len(ret) == 0 {
		panic("no return value specified for CreateCustomer")
	}

	var r0 *uint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Customer) (*uint, error)); ok {
		return rf(ctx, customer)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Customer) *uint); ok {
		r0 = rf(ctx, customer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uint)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entity.Customer) error); ok {
		r1 = rf(ctx, customer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Customer_CreateCustomer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCustomer'
type Customer_CreateCustomer_Call struct {
	*mock.Call
}

// CreateCustomer is a helper method to define mock.On call
//   - ctx context.Context
//   - customer *entity.Customer
func (_e *Customer_Expecter) CreateCustomer(ctx interface{}, customer interface{}) *Customer_CreateCustomer_Call {
	return &Customer_CreateCustomer_Call{Call: _e.mock.On("CreateCustomer", ctx, customer)}
}

func (_c *Customer_CreateCustomer_Call) Run(run func(ctx context.Context, customer *entity.Customer)) *Customer_CreateCustomer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Customer))
	})
	return _c
}

func (_c *Customer_CreateCustomer_Call) Return(_a0 *uint, _a1 error) *Customer_CreateCustomer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Customer_CreateCustomer_Call) RunAndReturn(run func(context.Context, *entity.Customer) (*uint, error)) *Customer_CreateCustomer_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCustomer provides a mock function with given fields: ctx, id
func (_m *Customer) DeleteCustomer(ctx context.Context, id uint) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCustomer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Customer_DeleteCustomer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCustomer'
type Customer_DeleteCustomer_Call struct {
	*mock.Call
}

// DeleteCustomer is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint
func (_e *Customer_Expecter) DeleteCustomer(ctx interface{}, id interface{}) *Customer_DeleteCustomer_Call {
	return &Customer_DeleteCustomer_Call{Call: _e.mock.On("DeleteCustomer", ctx, id)}
}

func (_c *Customer_DeleteCustomer_Call) Run(run func(ctx context.Context, id uint)) *Customer_DeleteCustomer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *Customer_DeleteCustomer_Call) Return(_a0 error) *Customer_DeleteCustomer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Customer_DeleteCustomer_Call) RunAndReturn(run func(context.Context, uint) error) *Customer_DeleteCustomer_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllCustomer provides a mock function with given fields: ctx
func (_m *Customer) GetAllCustomer(ctx context.Context) ([]*entity.Customer, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllCustomer")
	}

	var r0 []*entity.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*entity.Customer, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*entity.Customer); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Customer_GetAllCustomer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllCustomer'
type Customer_GetAllCustomer_Call struct {
	*mock.Call
}

// GetAllCustomer is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Customer_Expecter) GetAllCustomer(ctx interface{}) *Customer_GetAllCustomer_Call {
	return &Customer_GetAllCustomer_Call{Call: _e.mock.On("GetAllCustomer", ctx)}
}

func (_c *Customer_GetAllCustomer_Call) Run(run func(ctx context.Context)) *Customer_GetAllCustomer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Customer_GetAllCustomer_Call) Return(_a0 []*entity.Customer, _a1 error) *Customer_GetAllCustomer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Customer_GetAllCustomer_Call) RunAndReturn(run func(context.Context) ([]*entity.Customer, error)) *Customer_GetAllCustomer_Call {
	_c.Call.Return(run)
	return _c
}

// GetCustomerByID provides a mock function with given fields: ctx, id
func (_m *Customer) GetCustomerByID(ctx context.Context, id uint) (*entity.Customer, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomerByID")
	}

	var r0 *entity.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*entity.Customer, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *entity.Customer); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Customer_GetCustomerByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCustomerByID'
type Customer_GetCustomerByID_Call struct {
	*mock.Call
}

// GetCustomerByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint
func (_e *Customer_Expecter) GetCustomerByID(ctx interface{}, id interface{}) *Customer_GetCustomerByID_Call {
	return &Customer_GetCustomerByID_Call{Call: _e.mock.On("GetCustomerByID", ctx, id)}
}

func (_c *Customer_GetCustomerByID_Call) Run(run func(ctx context.Context, id uint)) *Customer_GetCustomerByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *Customer_GetCustomerByID_Call) Return(_a0 *entity.Customer, _a1 error) *Customer_GetCustomerByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Customer_GetCustomerByID_Call) RunAndReturn(run func(context.Context, uint) (*entity.Customer, error)) *Customer_GetCustomerByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCustomer provides a mock function with given fields: ctx, id, customer
func (_m *Customer) UpdateCustomer(ctx context.Context, id uint, customer *entity.Customer) (*entity.Customer, error) {
	ret := _m.Called(ctx, id, customer)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCustomer")
	}

	var r0 *entity.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, *entity.Customer) (*entity.Customer, error)); ok {
		return rf(ctx, id, customer)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint, *entity.Customer) *entity.Customer); ok {
		r0 = rf(ctx, id, customer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint, *entity.Customer) error); ok {
		r1 = rf(ctx, id, customer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Customer_UpdateCustomer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCustomer'
type Customer_UpdateCustomer_Call struct {
	*mock.Call
}

// UpdateCustomer is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint
//   - customer *entity.Customer
func (_e *Customer_Expecter) UpdateCustomer(ctx interface{}, id interface{}, customer interface{}) *Customer_UpdateCustomer_Call {
	return &Customer_UpdateCustomer_Call{Call: _e.mock.On("UpdateCustomer", ctx, id, customer)}
}

func (_c *Customer_UpdateCustomer_Call) Run(run func(ctx context.Context, id uint, customer *entity.Customer)) *Customer_UpdateCustomer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint), args[2].(*entity.Customer))
	})
	return _c
}

func (_c *Customer_UpdateCustomer_Call) Return(_a0 *entity.Customer, _a1 error) *Customer_UpdateCustomer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Customer_UpdateCustomer_Call) RunAndReturn(run func(context.Context, uint, *entity.Customer) (*entity.Customer, error)) *Customer_UpdateCustomer_Call {
	_c.Call.Return(run)
	return _c
}

// NewCustomer creates a new instance of Customer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCustomer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Customer {
	mock := &Customer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
